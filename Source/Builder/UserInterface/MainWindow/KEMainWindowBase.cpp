/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MainWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OpenSG/OSGConfig.h>



#include "Builder/UserInterface/MainWindow/MainMenu/KEMainMenu.h" // Menu Class
#include "Builder/UserInterface/MainWindow/MainToolbar/KEMainToolbar.h" // Toolbar Class
#include "Builder/UserInterface/MainWindow/StatusBar/KEStatusBar.h" // StatusBar Class
#include "Builder/UserInterface/MainWindow/HelpPanel/KEHelpPanel.h" // HelpPanel Class
#include "Builder/UserInterface/MainWindow/SceneComponentTree/KESceneComponentTree.h" // SceneComponentTree Class
#include "Builder/UserInterface/MainWindow/SceneNavigationPanel/KESceneNavigationPanel.h" // SceneNavigationPanel Class
#include "Builder/UserInterface/MainWindow/SceneViewportPanel/KESceneViewportPanel.h" // SceneViewportPanel Class
#include "Builder/UserInterface/MainWindow/SceneViewportToolbar/KESceneViewportToolbar.h" // SceneViewportToolbar Class
#include "Builder/UserInterface/MainWindow/Editors/KEEditorInterface.h" // SceneEditor Class

#include "KEMainWindowBase.h"
#include "KEMainWindow.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::MainWindow
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var MainMenu *      MainWindowBase::_sfMenu
    
*/

/*! \var MainToolbar *   MainWindowBase::_sfToolbar
    
*/

/*! \var StatusBar *     MainWindowBase::_sfStatusBar
    
*/

/*! \var HelpPanel *     MainWindowBase::_sfHelpPanel
    
*/

/*! \var SceneComponentTree * MainWindowBase::_sfSceneComponentTree
    
*/

/*! \var SceneNavigationPanel * MainWindowBase::_sfSceneNavigationPanel
    
*/

/*! \var SceneViewportPanel * MainWindowBase::_sfSceneViewportPanel
    
*/

/*! \var SceneViewportToolbar * MainWindowBase::_sfSceneViewportToolbar
    
*/

/*! \var EditorInterface * MainWindowBase::_sfSceneEditor
    
*/

/*! \var EditorInterface * MainWindowBase::_sfBackgroundEditor
    
*/

/*! \var EditorInterface * MainWindowBase::_sfCameraEditor
    
*/

/*! \var EditorInterface * MainWindowBase::_sfForegroundEditor
    
*/

/*! \var EditorInterface * MainWindowBase::_sfLightEditor
    
*/

/*! \var EditorInterface * MainWindowBase::_sfParticleSystemEditor
    
*/

/*! \var EditorInterface * MainWindowBase::_sfSceneObjectEditor
    
*/

/*! \var EditorInterface * MainWindowBase::_sfViewportEditor
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<MainWindow *>::_type("MainWindowPtr", "InterfacePtr");
#endif

OSG_FIELDTRAITS_GETTYPE(MainWindow *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           MainWindow *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           MainWindow *,
                           0);

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void MainWindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecMainMenuPtr::Description(
        SFUnrecMainMenuPtr::getClassType(),
        "Menu",
        "",
        MenuFieldId, MenuFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MainWindow::editHandleMenu),
        static_cast<FieldGetMethodSig >(&MainWindow::getHandleMenu));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecMainToolbarPtr::Description(
        SFUnrecMainToolbarPtr::getClassType(),
        "Toolbar",
        "",
        ToolbarFieldId, ToolbarFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MainWindow::editHandleToolbar),
        static_cast<FieldGetMethodSig >(&MainWindow::getHandleToolbar));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecStatusBarPtr::Description(
        SFUnrecStatusBarPtr::getClassType(),
        "StatusBar",
        "",
        StatusBarFieldId, StatusBarFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MainWindow::editHandleStatusBar),
        static_cast<FieldGetMethodSig >(&MainWindow::getHandleStatusBar));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecHelpPanelPtr::Description(
        SFUnrecHelpPanelPtr::getClassType(),
        "HelpPanel",
        "",
        HelpPanelFieldId, HelpPanelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MainWindow::editHandleHelpPanel),
        static_cast<FieldGetMethodSig >(&MainWindow::getHandleHelpPanel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecSceneComponentTreePtr::Description(
        SFUnrecSceneComponentTreePtr::getClassType(),
        "SceneComponentTree",
        "",
        SceneComponentTreeFieldId, SceneComponentTreeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MainWindow::editHandleSceneComponentTree),
        static_cast<FieldGetMethodSig >(&MainWindow::getHandleSceneComponentTree));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecSceneNavigationPanelPtr::Description(
        SFUnrecSceneNavigationPanelPtr::getClassType(),
        "SceneNavigationPanel",
        "",
        SceneNavigationPanelFieldId, SceneNavigationPanelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MainWindow::editHandleSceneNavigationPanel),
        static_cast<FieldGetMethodSig >(&MainWindow::getHandleSceneNavigationPanel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecSceneViewportPanelPtr::Description(
        SFUnrecSceneViewportPanelPtr::getClassType(),
        "SceneViewportPanel",
        "",
        SceneViewportPanelFieldId, SceneViewportPanelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MainWindow::editHandleSceneViewportPanel),
        static_cast<FieldGetMethodSig >(&MainWindow::getHandleSceneViewportPanel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecSceneViewportToolbarPtr::Description(
        SFUnrecSceneViewportToolbarPtr::getClassType(),
        "SceneViewportToolbar",
        "",
        SceneViewportToolbarFieldId, SceneViewportToolbarFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MainWindow::editHandleSceneViewportToolbar),
        static_cast<FieldGetMethodSig >(&MainWindow::getHandleSceneViewportToolbar));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecEditorInterfacePtr::Description(
        SFUnrecEditorInterfacePtr::getClassType(),
        "SceneEditor",
        "",
        SceneEditorFieldId, SceneEditorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MainWindow::editHandleSceneEditor),
        static_cast<FieldGetMethodSig >(&MainWindow::getHandleSceneEditor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecEditorInterfacePtr::Description(
        SFUnrecEditorInterfacePtr::getClassType(),
        "BackgroundEditor",
        "",
        BackgroundEditorFieldId, BackgroundEditorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MainWindow::editHandleBackgroundEditor),
        static_cast<FieldGetMethodSig >(&MainWindow::getHandleBackgroundEditor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecEditorInterfacePtr::Description(
        SFUnrecEditorInterfacePtr::getClassType(),
        "CameraEditor",
        "",
        CameraEditorFieldId, CameraEditorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MainWindow::editHandleCameraEditor),
        static_cast<FieldGetMethodSig >(&MainWindow::getHandleCameraEditor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecEditorInterfacePtr::Description(
        SFUnrecEditorInterfacePtr::getClassType(),
        "ForegroundEditor",
        "",
        ForegroundEditorFieldId, ForegroundEditorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MainWindow::editHandleForegroundEditor),
        static_cast<FieldGetMethodSig >(&MainWindow::getHandleForegroundEditor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecEditorInterfacePtr::Description(
        SFUnrecEditorInterfacePtr::getClassType(),
        "LightEditor",
        "",
        LightEditorFieldId, LightEditorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MainWindow::editHandleLightEditor),
        static_cast<FieldGetMethodSig >(&MainWindow::getHandleLightEditor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecEditorInterfacePtr::Description(
        SFUnrecEditorInterfacePtr::getClassType(),
        "ParticleSystemEditor",
        "",
        ParticleSystemEditorFieldId, ParticleSystemEditorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MainWindow::editHandleParticleSystemEditor),
        static_cast<FieldGetMethodSig >(&MainWindow::getHandleParticleSystemEditor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecEditorInterfacePtr::Description(
        SFUnrecEditorInterfacePtr::getClassType(),
        "SceneObjectEditor",
        "",
        SceneObjectEditorFieldId, SceneObjectEditorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MainWindow::editHandleSceneObjectEditor),
        static_cast<FieldGetMethodSig >(&MainWindow::getHandleSceneObjectEditor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecEditorInterfacePtr::Description(
        SFUnrecEditorInterfacePtr::getClassType(),
        "ViewportEditor",
        "",
        ViewportEditorFieldId, ViewportEditorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MainWindow::editHandleViewportEditor),
        static_cast<FieldGetMethodSig >(&MainWindow::getHandleViewportEditor));

    oType.addInitialDesc(pDesc);
}


MainWindowBase::TypeObject MainWindowBase::_type(
    MainWindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&MainWindowBase::createEmptyLocal),
    MainWindow::initMethod,
    MainWindow::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&MainWindow::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"MainWindow\"\n"
    "\tparent=\"Interface\"\n"
    "\tlibrary=\"KabalaEngine\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"false\"\n"
    "\tparentsystemcomponent=\"false\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    "\tlibnamespace=\"KE\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    ">\n"
    "     <Field\n"
    "          name=\"Menu\"\n"
    "          type=\"MainMenu\"\n"
    "\t\t  category=\"pointer\"\n"
    "          cardinality=\"single\"\n"
    "          visibility=\"external\"\n"
    "          access=\"protected\"\n"
    "          publicRead=\"true\"\n"
    "          defaultValue=\"NULL\"\n"
    "\t\t  fieldHeader=\"Builder/UserInterface/MainWindow/MainMenu/KEMainMenuFields.h\"\n"
    "\t\t  typeHeader=\"Builder/UserInterface/MainWindow/MainMenu/KEMainMenu.h\"\n"
    "          >\n"
    "\t </Field>\n"
    "     <Field\n"
    "          name=\"Toolbar\"\n"
    "          type=\"MainToolbar\"\n"
    "\t\t  category=\"pointer\"\n"
    "          cardinality=\"single\"\n"
    "          visibility=\"external\"\n"
    "          access=\"protected\"\n"
    "          publicRead=\"true\"\n"
    "          defaultValue=\"NULL\"\n"
    "\t\t  fieldHeader=\"Builder/UserInterface/MainWindow/MainToolbar/KEMainToolbarFields.h\"\n"
    "\t\t  typeHeader=\"Builder/UserInterface/MainWindow/MainToolbar/KEMainToolbar.h\"\n"
    "          >\n"
    "\t </Field>\n"
    "     <Field\n"
    "          name=\"StatusBar\"\n"
    "          type=\"StatusBar\"\n"
    "\t\t  category=\"pointer\"\n"
    "          cardinality=\"single\"\n"
    "          visibility=\"external\"\n"
    "          access=\"protected\"\n"
    "          publicRead=\"true\"\n"
    "          defaultValue=\"NULL\"\n"
    "\t\t  fieldHeader=\"Builder/UserInterface/MainWindow/StatusBar/KEStatusBarFields.h\"\n"
    "\t\t  typeHeader=\"Builder/UserInterface/MainWindow/StatusBar/KEStatusBar.h\"\n"
    "          >\n"
    "\t </Field>\n"
    "     <Field\n"
    "          name=\"HelpPanel\"\n"
    "          type=\"HelpPanel\"\n"
    "\t\t  category=\"pointer\"\n"
    "          cardinality=\"single\"\n"
    "          visibility=\"external\"\n"
    "          access=\"protected\"\n"
    "          publicRead=\"true\"\n"
    "          defaultValue=\"NULL\"\n"
    "\t\t  fieldHeader=\"Builder/UserInterface/MainWindow/HelpPanel/KEHelpPanelFields.h\"\n"
    "\t\t  typeHeader=\"Builder/UserInterface/MainWindow/HelpPanel/KEHelpPanel.h\"\n"
    "          >\n"
    "\t </Field>\n"
    "     <Field\n"
    "          name=\"SceneComponentTree\"\n"
    "          type=\"SceneComponentTree\"\n"
    "\t\t  category=\"pointer\"\n"
    "          cardinality=\"single\"\n"
    "          visibility=\"external\"\n"
    "          access=\"protected\"\n"
    "          publicRead=\"true\"\n"
    "          defaultValue=\"NULL\"\n"
    "\t\t  fieldHeader=\"Builder/UserInterface/MainWindow/SceneComponentTree/KESceneComponentTreeFields.h\"\n"
    "\t\t  typeHeader=\"Builder/UserInterface/MainWindow/SceneComponentTree/KESceneComponentTree.h\"\n"
    "          >\n"
    "\t </Field>\n"
    "     <Field\n"
    "          name=\"SceneNavigationPanel\"\n"
    "          type=\"SceneNavigationPanel\"\n"
    "\t\t  category=\"pointer\"\n"
    "          cardinality=\"single\"\n"
    "          visibility=\"external\"\n"
    "          access=\"protected\"\n"
    "          publicRead=\"true\"\n"
    "          defaultValue=\"NULL\"\n"
    "\t\t  fieldHeader=\"Builder/UserInterface/MainWindow/SceneNavigationPanel/KESceneNavigationPanelFields.h\"\n"
    "\t\t  typeHeader=\"Builder/UserInterface/MainWindow/SceneNavigationPanel/KESceneNavigationPanel.h\"\n"
    "          >\n"
    "\t </Field>\n"
    "     <Field\n"
    "          name=\"SceneViewportPanel\"\n"
    "          type=\"SceneViewportPanel\"\n"
    "\t\t  category=\"pointer\"\n"
    "          cardinality=\"single\"\n"
    "          visibility=\"external\"\n"
    "          access=\"protected\"\n"
    "          publicRead=\"true\"\n"
    "          defaultValue=\"NULL\"\n"
    "\t\t  fieldHeader=\"Builder/UserInterface/MainWindow/SceneViewportPanel/KESceneViewportPanelFields.h\"\n"
    "\t\t  typeHeader=\"Builder/UserInterface/MainWindow/SceneViewportPanel/KESceneViewportPanel.h\"\n"
    "          >\n"
    "\t </Field>\n"
    "     <Field\n"
    "          name=\"SceneViewportToolbar\"\n"
    "          type=\"SceneViewportToolbar\"\n"
    "\t\t  category=\"pointer\"\n"
    "          cardinality=\"single\"\n"
    "          visibility=\"external\"\n"
    "          access=\"protected\"\n"
    "          publicRead=\"true\"\n"
    "          defaultValue=\"NULL\"\n"
    "\t\t  fieldHeader=\"Builder/UserInterface/MainWindow/SceneViewportToolbar/KESceneViewportToolbarFields.h\"\n"
    "\t\t  typeHeader=\"Builder/UserInterface/MainWindow/SceneViewportToolbar/KESceneViewportToolbar.h\"\n"
    "          >\n"
    "\t </Field>\n"
    "     <Field\n"
    "          name=\"SceneEditor\"\n"
    "          type=\"EditorInterface\"\n"
    "\t\t  category=\"pointer\"\n"
    "          cardinality=\"single\"\n"
    "          visibility=\"external\"\n"
    "          access=\"protected\"\n"
    "          publicRead=\"true\"\n"
    "          defaultValue=\"NULL\"\n"
    "\t\t  fieldHeader=\"Builder/UserInterface/MainWindow/Editors/KEEditorInterfaceFields.h\"\n"
    "\t\t  typeHeader=\"Builder/UserInterface/MainWindow/Editors/KEEditorInterface.h\"\n"
    "          >\n"
    "\t </Field>\n"
    "     <Field\n"
    "          name=\"BackgroundEditor\"\n"
    "          type=\"EditorInterface\"\n"
    "\t\t  category=\"pointer\"\n"
    "          cardinality=\"single\"\n"
    "          visibility=\"external\"\n"
    "          access=\"protected\"\n"
    "          publicRead=\"true\"\n"
    "          defaultValue=\"NULL\"\n"
    "\t\t  fieldHeader=\"Builder/UserInterface/MainWindow/Editors/KEEditorInterfaceFields.h\"\n"
    "\t\t  typeHeader=\"Builder/UserInterface/MainWindow/Editors/KEEditorInterface.h\"\n"
    "          >\n"
    "\t </Field>\n"
    "     <Field\n"
    "          name=\"CameraEditor\"\n"
    "          type=\"EditorInterface\"\n"
    "\t\t  category=\"pointer\"\n"
    "          cardinality=\"single\"\n"
    "          visibility=\"external\"\n"
    "          access=\"protected\"\n"
    "          publicRead=\"true\"\n"
    "          defaultValue=\"NULL\"\n"
    "\t\t  fieldHeader=\"Builder/UserInterface/MainWindow/Editors/KEEditorInterfaceFields.h\"\n"
    "\t\t  typeHeader=\"Builder/UserInterface/MainWindow/Editors/KEEditorInterface.h\"\n"
    "          >\n"
    "\t </Field>\n"
    "     <Field\n"
    "          name=\"ForegroundEditor\"\n"
    "          type=\"EditorInterface\"\n"
    "\t\t  category=\"pointer\"\n"
    "          cardinality=\"single\"\n"
    "          visibility=\"external\"\n"
    "          access=\"protected\"\n"
    "          publicRead=\"true\"\n"
    "          defaultValue=\"NULL\"\n"
    "\t\t  fieldHeader=\"Builder/UserInterface/MainWindow/Editors/KEEditorInterfaceFields.h\"\n"
    "\t\t  typeHeader=\"Builder/UserInterface/MainWindow/Editors/KEEditorInterface.h\"\n"
    "          >\n"
    "\t </Field>\n"
    "     <Field\n"
    "          name=\"LightEditor\"\n"
    "          type=\"EditorInterface\"\n"
    "\t\t  category=\"pointer\"\n"
    "          cardinality=\"single\"\n"
    "          visibility=\"external\"\n"
    "          access=\"protected\"\n"
    "          publicRead=\"true\"\n"
    "          defaultValue=\"NULL\"\n"
    "\t\t  fieldHeader=\"Builder/UserInterface/MainWindow/Editors/KEEditorInterfaceFields.h\"\n"
    "\t\t  typeHeader=\"Builder/UserInterface/MainWindow/Editors/KEEditorInterface.h\"\n"
    "          >\n"
    "\t </Field>\n"
    "     <Field\n"
    "          name=\"ParticleSystemEditor\"\n"
    "          type=\"EditorInterface\"\n"
    "\t\t  category=\"pointer\"\n"
    "          cardinality=\"single\"\n"
    "          visibility=\"external\"\n"
    "          access=\"protected\"\n"
    "          publicRead=\"true\"\n"
    "          defaultValue=\"NULL\"\n"
    "\t\t  fieldHeader=\"Builder/UserInterface/MainWindow/Editors/KEEditorInterfaceFields.h\"\n"
    "\t\t  typeHeader=\"Builder/UserInterface/MainWindow/Editors/KEEditorInterface.h\"\n"
    "          >\n"
    "\t </Field>\n"
    "     <Field\n"
    "          name=\"SceneObjectEditor\"\n"
    "          type=\"EditorInterface\"\n"
    "\t\t  category=\"pointer\"\n"
    "          cardinality=\"single\"\n"
    "          visibility=\"external\"\n"
    "          access=\"protected\"\n"
    "          publicRead=\"true\"\n"
    "          defaultValue=\"NULL\"\n"
    "\t\t  fieldHeader=\"Builder/UserInterface/MainWindow/Editors/KEEditorInterfaceFields.h\"\n"
    "\t\t  typeHeader=\"Builder/UserInterface/MainWindow/Editors/KEEditorInterface.h\"\n"
    "          >\n"
    "\t </Field>\n"
    "     <Field\n"
    "          name=\"ViewportEditor\"\n"
    "          type=\"EditorInterface\"\n"
    "\t\t  category=\"pointer\"\n"
    "          cardinality=\"single\"\n"
    "          visibility=\"external\"\n"
    "          access=\"protected\"\n"
    "          publicRead=\"true\"\n"
    "          defaultValue=\"NULL\"\n"
    "\t\t  fieldHeader=\"Builder/UserInterface/MainWindow/Editors/KEEditorInterfaceFields.h\"\n"
    "\t\t  typeHeader=\"Builder/UserInterface/MainWindow/Editors/KEEditorInterface.h\"\n"
    "          >\n"
    "\t </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &MainWindowBase::getType(void)
{
    return _type;
}

const FieldContainerType &MainWindowBase::getType(void) const
{
    return _type;
}

UInt32 MainWindowBase::getContainerSize(void) const
{
    return sizeof(MainWindow);
}

/*------------------------- decorator get ------------------------------*/


//! Get the MainWindow::_sfMenu field.
const SFUnrecMainMenuPtr *MainWindowBase::getSFMenu(void) const
{
    return &_sfMenu;
}

SFUnrecMainMenuPtr  *MainWindowBase::editSFMenu           (void)
{
    editSField(MenuFieldMask);

    return &_sfMenu;
}

//! Get the MainWindow::_sfToolbar field.
const SFUnrecMainToolbarPtr *MainWindowBase::getSFToolbar(void) const
{
    return &_sfToolbar;
}

SFUnrecMainToolbarPtr *MainWindowBase::editSFToolbar        (void)
{
    editSField(ToolbarFieldMask);

    return &_sfToolbar;
}

//! Get the MainWindow::_sfStatusBar field.
const SFUnrecStatusBarPtr *MainWindowBase::getSFStatusBar(void) const
{
    return &_sfStatusBar;
}

SFUnrecStatusBarPtr *MainWindowBase::editSFStatusBar      (void)
{
    editSField(StatusBarFieldMask);

    return &_sfStatusBar;
}

//! Get the MainWindow::_sfHelpPanel field.
const SFUnrecHelpPanelPtr *MainWindowBase::getSFHelpPanel(void) const
{
    return &_sfHelpPanel;
}

SFUnrecHelpPanelPtr *MainWindowBase::editSFHelpPanel      (void)
{
    editSField(HelpPanelFieldMask);

    return &_sfHelpPanel;
}

//! Get the MainWindow::_sfSceneComponentTree field.
const SFUnrecSceneComponentTreePtr *MainWindowBase::getSFSceneComponentTree(void) const
{
    return &_sfSceneComponentTree;
}

SFUnrecSceneComponentTreePtr *MainWindowBase::editSFSceneComponentTree(void)
{
    editSField(SceneComponentTreeFieldMask);

    return &_sfSceneComponentTree;
}

//! Get the MainWindow::_sfSceneNavigationPanel field.
const SFUnrecSceneNavigationPanelPtr *MainWindowBase::getSFSceneNavigationPanel(void) const
{
    return &_sfSceneNavigationPanel;
}

SFUnrecSceneNavigationPanelPtr *MainWindowBase::editSFSceneNavigationPanel(void)
{
    editSField(SceneNavigationPanelFieldMask);

    return &_sfSceneNavigationPanel;
}

//! Get the MainWindow::_sfSceneViewportPanel field.
const SFUnrecSceneViewportPanelPtr *MainWindowBase::getSFSceneViewportPanel(void) const
{
    return &_sfSceneViewportPanel;
}

SFUnrecSceneViewportPanelPtr *MainWindowBase::editSFSceneViewportPanel(void)
{
    editSField(SceneViewportPanelFieldMask);

    return &_sfSceneViewportPanel;
}

//! Get the MainWindow::_sfSceneViewportToolbar field.
const SFUnrecSceneViewportToolbarPtr *MainWindowBase::getSFSceneViewportToolbar(void) const
{
    return &_sfSceneViewportToolbar;
}

SFUnrecSceneViewportToolbarPtr *MainWindowBase::editSFSceneViewportToolbar(void)
{
    editSField(SceneViewportToolbarFieldMask);

    return &_sfSceneViewportToolbar;
}

//! Get the MainWindow::_sfSceneEditor field.
const SFUnrecEditorInterfacePtr *MainWindowBase::getSFSceneEditor(void) const
{
    return &_sfSceneEditor;
}

SFUnrecEditorInterfacePtr *MainWindowBase::editSFSceneEditor    (void)
{
    editSField(SceneEditorFieldMask);

    return &_sfSceneEditor;
}

//! Get the MainWindow::_sfBackgroundEditor field.
const SFUnrecEditorInterfacePtr *MainWindowBase::getSFBackgroundEditor(void) const
{
    return &_sfBackgroundEditor;
}

SFUnrecEditorInterfacePtr *MainWindowBase::editSFBackgroundEditor(void)
{
    editSField(BackgroundEditorFieldMask);

    return &_sfBackgroundEditor;
}

//! Get the MainWindow::_sfCameraEditor field.
const SFUnrecEditorInterfacePtr *MainWindowBase::getSFCameraEditor(void) const
{
    return &_sfCameraEditor;
}

SFUnrecEditorInterfacePtr *MainWindowBase::editSFCameraEditor   (void)
{
    editSField(CameraEditorFieldMask);

    return &_sfCameraEditor;
}

//! Get the MainWindow::_sfForegroundEditor field.
const SFUnrecEditorInterfacePtr *MainWindowBase::getSFForegroundEditor(void) const
{
    return &_sfForegroundEditor;
}

SFUnrecEditorInterfacePtr *MainWindowBase::editSFForegroundEditor(void)
{
    editSField(ForegroundEditorFieldMask);

    return &_sfForegroundEditor;
}

//! Get the MainWindow::_sfLightEditor field.
const SFUnrecEditorInterfacePtr *MainWindowBase::getSFLightEditor(void) const
{
    return &_sfLightEditor;
}

SFUnrecEditorInterfacePtr *MainWindowBase::editSFLightEditor    (void)
{
    editSField(LightEditorFieldMask);

    return &_sfLightEditor;
}

//! Get the MainWindow::_sfParticleSystemEditor field.
const SFUnrecEditorInterfacePtr *MainWindowBase::getSFParticleSystemEditor(void) const
{
    return &_sfParticleSystemEditor;
}

SFUnrecEditorInterfacePtr *MainWindowBase::editSFParticleSystemEditor(void)
{
    editSField(ParticleSystemEditorFieldMask);

    return &_sfParticleSystemEditor;
}

//! Get the MainWindow::_sfSceneObjectEditor field.
const SFUnrecEditorInterfacePtr *MainWindowBase::getSFSceneObjectEditor(void) const
{
    return &_sfSceneObjectEditor;
}

SFUnrecEditorInterfacePtr *MainWindowBase::editSFSceneObjectEditor(void)
{
    editSField(SceneObjectEditorFieldMask);

    return &_sfSceneObjectEditor;
}

//! Get the MainWindow::_sfViewportEditor field.
const SFUnrecEditorInterfacePtr *MainWindowBase::getSFViewportEditor(void) const
{
    return &_sfViewportEditor;
}

SFUnrecEditorInterfacePtr *MainWindowBase::editSFViewportEditor (void)
{
    editSField(ViewportEditorFieldMask);

    return &_sfViewportEditor;
}





/*------------------------------ access -----------------------------------*/

UInt32 MainWindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (MenuFieldMask & whichField))
    {
        returnValue += _sfMenu.getBinSize();
    }
    if(FieldBits::NoField != (ToolbarFieldMask & whichField))
    {
        returnValue += _sfToolbar.getBinSize();
    }
    if(FieldBits::NoField != (StatusBarFieldMask & whichField))
    {
        returnValue += _sfStatusBar.getBinSize();
    }
    if(FieldBits::NoField != (HelpPanelFieldMask & whichField))
    {
        returnValue += _sfHelpPanel.getBinSize();
    }
    if(FieldBits::NoField != (SceneComponentTreeFieldMask & whichField))
    {
        returnValue += _sfSceneComponentTree.getBinSize();
    }
    if(FieldBits::NoField != (SceneNavigationPanelFieldMask & whichField))
    {
        returnValue += _sfSceneNavigationPanel.getBinSize();
    }
    if(FieldBits::NoField != (SceneViewportPanelFieldMask & whichField))
    {
        returnValue += _sfSceneViewportPanel.getBinSize();
    }
    if(FieldBits::NoField != (SceneViewportToolbarFieldMask & whichField))
    {
        returnValue += _sfSceneViewportToolbar.getBinSize();
    }
    if(FieldBits::NoField != (SceneEditorFieldMask & whichField))
    {
        returnValue += _sfSceneEditor.getBinSize();
    }
    if(FieldBits::NoField != (BackgroundEditorFieldMask & whichField))
    {
        returnValue += _sfBackgroundEditor.getBinSize();
    }
    if(FieldBits::NoField != (CameraEditorFieldMask & whichField))
    {
        returnValue += _sfCameraEditor.getBinSize();
    }
    if(FieldBits::NoField != (ForegroundEditorFieldMask & whichField))
    {
        returnValue += _sfForegroundEditor.getBinSize();
    }
    if(FieldBits::NoField != (LightEditorFieldMask & whichField))
    {
        returnValue += _sfLightEditor.getBinSize();
    }
    if(FieldBits::NoField != (ParticleSystemEditorFieldMask & whichField))
    {
        returnValue += _sfParticleSystemEditor.getBinSize();
    }
    if(FieldBits::NoField != (SceneObjectEditorFieldMask & whichField))
    {
        returnValue += _sfSceneObjectEditor.getBinSize();
    }
    if(FieldBits::NoField != (ViewportEditorFieldMask & whichField))
    {
        returnValue += _sfViewportEditor.getBinSize();
    }

    return returnValue;
}

void MainWindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (MenuFieldMask & whichField))
    {
        _sfMenu.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ToolbarFieldMask & whichField))
    {
        _sfToolbar.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StatusBarFieldMask & whichField))
    {
        _sfStatusBar.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HelpPanelFieldMask & whichField))
    {
        _sfHelpPanel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SceneComponentTreeFieldMask & whichField))
    {
        _sfSceneComponentTree.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SceneNavigationPanelFieldMask & whichField))
    {
        _sfSceneNavigationPanel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SceneViewportPanelFieldMask & whichField))
    {
        _sfSceneViewportPanel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SceneViewportToolbarFieldMask & whichField))
    {
        _sfSceneViewportToolbar.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SceneEditorFieldMask & whichField))
    {
        _sfSceneEditor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundEditorFieldMask & whichField))
    {
        _sfBackgroundEditor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CameraEditorFieldMask & whichField))
    {
        _sfCameraEditor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ForegroundEditorFieldMask & whichField))
    {
        _sfForegroundEditor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightEditorFieldMask & whichField))
    {
        _sfLightEditor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ParticleSystemEditorFieldMask & whichField))
    {
        _sfParticleSystemEditor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SceneObjectEditorFieldMask & whichField))
    {
        _sfSceneObjectEditor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ViewportEditorFieldMask & whichField))
    {
        _sfViewportEditor.copyToBin(pMem);
    }
}

void MainWindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (MenuFieldMask & whichField))
    {
        _sfMenu.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ToolbarFieldMask & whichField))
    {
        _sfToolbar.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StatusBarFieldMask & whichField))
    {
        _sfStatusBar.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HelpPanelFieldMask & whichField))
    {
        _sfHelpPanel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SceneComponentTreeFieldMask & whichField))
    {
        _sfSceneComponentTree.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SceneNavigationPanelFieldMask & whichField))
    {
        _sfSceneNavigationPanel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SceneViewportPanelFieldMask & whichField))
    {
        _sfSceneViewportPanel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SceneViewportToolbarFieldMask & whichField))
    {
        _sfSceneViewportToolbar.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SceneEditorFieldMask & whichField))
    {
        _sfSceneEditor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundEditorFieldMask & whichField))
    {
        _sfBackgroundEditor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CameraEditorFieldMask & whichField))
    {
        _sfCameraEditor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ForegroundEditorFieldMask & whichField))
    {
        _sfForegroundEditor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightEditorFieldMask & whichField))
    {
        _sfLightEditor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ParticleSystemEditorFieldMask & whichField))
    {
        _sfParticleSystemEditor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SceneObjectEditorFieldMask & whichField))
    {
        _sfSceneObjectEditor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ViewportEditorFieldMask & whichField))
    {
        _sfViewportEditor.copyFromBin(pMem);
    }
}

//! create a new instance of the class
MainWindowTransitPtr MainWindowBase::createLocal(BitVector bFlags)
{
    MainWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<MainWindow>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
MainWindowTransitPtr MainWindowBase::createDependent(BitVector bFlags)
{
    MainWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<MainWindow>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
MainWindowTransitPtr MainWindowBase::create(void)
{
    MainWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<MainWindow>(tmpPtr);
    }

    return fc;
}

MainWindow *MainWindowBase::createEmptyLocal(BitVector bFlags)
{
    MainWindow *returnValue;

    newPtr<MainWindow>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
MainWindow *MainWindowBase::createEmpty(void)
{
    MainWindow *returnValue;

    newPtr<MainWindow>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr MainWindowBase::shallowCopyLocal(
    BitVector bFlags) const
{
    MainWindow *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MainWindow *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr MainWindowBase::shallowCopyDependent(
    BitVector bFlags) const
{
    MainWindow *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MainWindow *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr MainWindowBase::shallowCopy(void) const
{
    MainWindow *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const MainWindow *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

MainWindowBase::MainWindowBase(void) :
    Inherited(),
    _sfMenu                   (NULL),
    _sfToolbar                (NULL),
    _sfStatusBar              (NULL),
    _sfHelpPanel              (NULL),
    _sfSceneComponentTree     (NULL),
    _sfSceneNavigationPanel   (NULL),
    _sfSceneViewportPanel     (NULL),
    _sfSceneViewportToolbar   (NULL),
    _sfSceneEditor            (NULL),
    _sfBackgroundEditor       (NULL),
    _sfCameraEditor           (NULL),
    _sfForegroundEditor       (NULL),
    _sfLightEditor            (NULL),
    _sfParticleSystemEditor   (NULL),
    _sfSceneObjectEditor      (NULL),
    _sfViewportEditor         (NULL)
{
}

MainWindowBase::MainWindowBase(const MainWindowBase &source) :
    Inherited(source),
    _sfMenu                   (NULL),
    _sfToolbar                (NULL),
    _sfStatusBar              (NULL),
    _sfHelpPanel              (NULL),
    _sfSceneComponentTree     (NULL),
    _sfSceneNavigationPanel   (NULL),
    _sfSceneViewportPanel     (NULL),
    _sfSceneViewportToolbar   (NULL),
    _sfSceneEditor            (NULL),
    _sfBackgroundEditor       (NULL),
    _sfCameraEditor           (NULL),
    _sfForegroundEditor       (NULL),
    _sfLightEditor            (NULL),
    _sfParticleSystemEditor   (NULL),
    _sfSceneObjectEditor      (NULL),
    _sfViewportEditor         (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

MainWindowBase::~MainWindowBase(void)
{
}

void MainWindowBase::onCreate(const MainWindow *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        MainWindow *pThis = static_cast<MainWindow *>(this);

        pThis->setMenu(source->getMenu());

        pThis->setToolbar(source->getToolbar());

        pThis->setStatusBar(source->getStatusBar());

        pThis->setHelpPanel(source->getHelpPanel());

        pThis->setSceneComponentTree(source->getSceneComponentTree());

        pThis->setSceneNavigationPanel(source->getSceneNavigationPanel());

        pThis->setSceneViewportPanel(source->getSceneViewportPanel());

        pThis->setSceneViewportToolbar(source->getSceneViewportToolbar());

        pThis->setSceneEditor(source->getSceneEditor());

        pThis->setBackgroundEditor(source->getBackgroundEditor());

        pThis->setCameraEditor(source->getCameraEditor());

        pThis->setForegroundEditor(source->getForegroundEditor());

        pThis->setLightEditor(source->getLightEditor());

        pThis->setParticleSystemEditor(source->getParticleSystemEditor());

        pThis->setSceneObjectEditor(source->getSceneObjectEditor());

        pThis->setViewportEditor(source->getViewportEditor());
    }
}

GetFieldHandlePtr MainWindowBase::getHandleMenu            (void) const
{
    SFUnrecMainMenuPtr::GetHandlePtr returnValue(
        new  SFUnrecMainMenuPtr::GetHandle(
             &_sfMenu,
             this->getType().getFieldDesc(MenuFieldId),
             const_cast<MainWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MainWindowBase::editHandleMenu           (void)
{
    SFUnrecMainMenuPtr::EditHandlePtr returnValue(
        new  SFUnrecMainMenuPtr::EditHandle(
             &_sfMenu,
             this->getType().getFieldDesc(MenuFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MainWindow::setMenu,
                    static_cast<MainWindow *>(this), _1));

    editSField(MenuFieldMask);

    return returnValue;
}

GetFieldHandlePtr MainWindowBase::getHandleToolbar         (void) const
{
    SFUnrecMainToolbarPtr::GetHandlePtr returnValue(
        new  SFUnrecMainToolbarPtr::GetHandle(
             &_sfToolbar,
             this->getType().getFieldDesc(ToolbarFieldId),
             const_cast<MainWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MainWindowBase::editHandleToolbar        (void)
{
    SFUnrecMainToolbarPtr::EditHandlePtr returnValue(
        new  SFUnrecMainToolbarPtr::EditHandle(
             &_sfToolbar,
             this->getType().getFieldDesc(ToolbarFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MainWindow::setToolbar,
                    static_cast<MainWindow *>(this), _1));

    editSField(ToolbarFieldMask);

    return returnValue;
}

GetFieldHandlePtr MainWindowBase::getHandleStatusBar       (void) const
{
    SFUnrecStatusBarPtr::GetHandlePtr returnValue(
        new  SFUnrecStatusBarPtr::GetHandle(
             &_sfStatusBar,
             this->getType().getFieldDesc(StatusBarFieldId),
             const_cast<MainWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MainWindowBase::editHandleStatusBar      (void)
{
    SFUnrecStatusBarPtr::EditHandlePtr returnValue(
        new  SFUnrecStatusBarPtr::EditHandle(
             &_sfStatusBar,
             this->getType().getFieldDesc(StatusBarFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MainWindow::setStatusBar,
                    static_cast<MainWindow *>(this), _1));

    editSField(StatusBarFieldMask);

    return returnValue;
}

GetFieldHandlePtr MainWindowBase::getHandleHelpPanel       (void) const
{
    SFUnrecHelpPanelPtr::GetHandlePtr returnValue(
        new  SFUnrecHelpPanelPtr::GetHandle(
             &_sfHelpPanel,
             this->getType().getFieldDesc(HelpPanelFieldId),
             const_cast<MainWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MainWindowBase::editHandleHelpPanel      (void)
{
    SFUnrecHelpPanelPtr::EditHandlePtr returnValue(
        new  SFUnrecHelpPanelPtr::EditHandle(
             &_sfHelpPanel,
             this->getType().getFieldDesc(HelpPanelFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MainWindow::setHelpPanel,
                    static_cast<MainWindow *>(this), _1));

    editSField(HelpPanelFieldMask);

    return returnValue;
}

GetFieldHandlePtr MainWindowBase::getHandleSceneComponentTree (void) const
{
    SFUnrecSceneComponentTreePtr::GetHandlePtr returnValue(
        new  SFUnrecSceneComponentTreePtr::GetHandle(
             &_sfSceneComponentTree,
             this->getType().getFieldDesc(SceneComponentTreeFieldId),
             const_cast<MainWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MainWindowBase::editHandleSceneComponentTree(void)
{
    SFUnrecSceneComponentTreePtr::EditHandlePtr returnValue(
        new  SFUnrecSceneComponentTreePtr::EditHandle(
             &_sfSceneComponentTree,
             this->getType().getFieldDesc(SceneComponentTreeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MainWindow::setSceneComponentTree,
                    static_cast<MainWindow *>(this), _1));

    editSField(SceneComponentTreeFieldMask);

    return returnValue;
}

GetFieldHandlePtr MainWindowBase::getHandleSceneNavigationPanel (void) const
{
    SFUnrecSceneNavigationPanelPtr::GetHandlePtr returnValue(
        new  SFUnrecSceneNavigationPanelPtr::GetHandle(
             &_sfSceneNavigationPanel,
             this->getType().getFieldDesc(SceneNavigationPanelFieldId),
             const_cast<MainWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MainWindowBase::editHandleSceneNavigationPanel(void)
{
    SFUnrecSceneNavigationPanelPtr::EditHandlePtr returnValue(
        new  SFUnrecSceneNavigationPanelPtr::EditHandle(
             &_sfSceneNavigationPanel,
             this->getType().getFieldDesc(SceneNavigationPanelFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MainWindow::setSceneNavigationPanel,
                    static_cast<MainWindow *>(this), _1));

    editSField(SceneNavigationPanelFieldMask);

    return returnValue;
}

GetFieldHandlePtr MainWindowBase::getHandleSceneViewportPanel (void) const
{
    SFUnrecSceneViewportPanelPtr::GetHandlePtr returnValue(
        new  SFUnrecSceneViewportPanelPtr::GetHandle(
             &_sfSceneViewportPanel,
             this->getType().getFieldDesc(SceneViewportPanelFieldId),
             const_cast<MainWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MainWindowBase::editHandleSceneViewportPanel(void)
{
    SFUnrecSceneViewportPanelPtr::EditHandlePtr returnValue(
        new  SFUnrecSceneViewportPanelPtr::EditHandle(
             &_sfSceneViewportPanel,
             this->getType().getFieldDesc(SceneViewportPanelFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MainWindow::setSceneViewportPanel,
                    static_cast<MainWindow *>(this), _1));

    editSField(SceneViewportPanelFieldMask);

    return returnValue;
}

GetFieldHandlePtr MainWindowBase::getHandleSceneViewportToolbar (void) const
{
    SFUnrecSceneViewportToolbarPtr::GetHandlePtr returnValue(
        new  SFUnrecSceneViewportToolbarPtr::GetHandle(
             &_sfSceneViewportToolbar,
             this->getType().getFieldDesc(SceneViewportToolbarFieldId),
             const_cast<MainWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MainWindowBase::editHandleSceneViewportToolbar(void)
{
    SFUnrecSceneViewportToolbarPtr::EditHandlePtr returnValue(
        new  SFUnrecSceneViewportToolbarPtr::EditHandle(
             &_sfSceneViewportToolbar,
             this->getType().getFieldDesc(SceneViewportToolbarFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MainWindow::setSceneViewportToolbar,
                    static_cast<MainWindow *>(this), _1));

    editSField(SceneViewportToolbarFieldMask);

    return returnValue;
}

GetFieldHandlePtr MainWindowBase::getHandleSceneEditor     (void) const
{
    SFUnrecEditorInterfacePtr::GetHandlePtr returnValue(
        new  SFUnrecEditorInterfacePtr::GetHandle(
             &_sfSceneEditor,
             this->getType().getFieldDesc(SceneEditorFieldId),
             const_cast<MainWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MainWindowBase::editHandleSceneEditor    (void)
{
    SFUnrecEditorInterfacePtr::EditHandlePtr returnValue(
        new  SFUnrecEditorInterfacePtr::EditHandle(
             &_sfSceneEditor,
             this->getType().getFieldDesc(SceneEditorFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MainWindow::setSceneEditor,
                    static_cast<MainWindow *>(this), _1));

    editSField(SceneEditorFieldMask);

    return returnValue;
}

GetFieldHandlePtr MainWindowBase::getHandleBackgroundEditor (void) const
{
    SFUnrecEditorInterfacePtr::GetHandlePtr returnValue(
        new  SFUnrecEditorInterfacePtr::GetHandle(
             &_sfBackgroundEditor,
             this->getType().getFieldDesc(BackgroundEditorFieldId),
             const_cast<MainWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MainWindowBase::editHandleBackgroundEditor(void)
{
    SFUnrecEditorInterfacePtr::EditHandlePtr returnValue(
        new  SFUnrecEditorInterfacePtr::EditHandle(
             &_sfBackgroundEditor,
             this->getType().getFieldDesc(BackgroundEditorFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MainWindow::setBackgroundEditor,
                    static_cast<MainWindow *>(this), _1));

    editSField(BackgroundEditorFieldMask);

    return returnValue;
}

GetFieldHandlePtr MainWindowBase::getHandleCameraEditor    (void) const
{
    SFUnrecEditorInterfacePtr::GetHandlePtr returnValue(
        new  SFUnrecEditorInterfacePtr::GetHandle(
             &_sfCameraEditor,
             this->getType().getFieldDesc(CameraEditorFieldId),
             const_cast<MainWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MainWindowBase::editHandleCameraEditor   (void)
{
    SFUnrecEditorInterfacePtr::EditHandlePtr returnValue(
        new  SFUnrecEditorInterfacePtr::EditHandle(
             &_sfCameraEditor,
             this->getType().getFieldDesc(CameraEditorFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MainWindow::setCameraEditor,
                    static_cast<MainWindow *>(this), _1));

    editSField(CameraEditorFieldMask);

    return returnValue;
}

GetFieldHandlePtr MainWindowBase::getHandleForegroundEditor (void) const
{
    SFUnrecEditorInterfacePtr::GetHandlePtr returnValue(
        new  SFUnrecEditorInterfacePtr::GetHandle(
             &_sfForegroundEditor,
             this->getType().getFieldDesc(ForegroundEditorFieldId),
             const_cast<MainWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MainWindowBase::editHandleForegroundEditor(void)
{
    SFUnrecEditorInterfacePtr::EditHandlePtr returnValue(
        new  SFUnrecEditorInterfacePtr::EditHandle(
             &_sfForegroundEditor,
             this->getType().getFieldDesc(ForegroundEditorFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MainWindow::setForegroundEditor,
                    static_cast<MainWindow *>(this), _1));

    editSField(ForegroundEditorFieldMask);

    return returnValue;
}

GetFieldHandlePtr MainWindowBase::getHandleLightEditor     (void) const
{
    SFUnrecEditorInterfacePtr::GetHandlePtr returnValue(
        new  SFUnrecEditorInterfacePtr::GetHandle(
             &_sfLightEditor,
             this->getType().getFieldDesc(LightEditorFieldId),
             const_cast<MainWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MainWindowBase::editHandleLightEditor    (void)
{
    SFUnrecEditorInterfacePtr::EditHandlePtr returnValue(
        new  SFUnrecEditorInterfacePtr::EditHandle(
             &_sfLightEditor,
             this->getType().getFieldDesc(LightEditorFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MainWindow::setLightEditor,
                    static_cast<MainWindow *>(this), _1));

    editSField(LightEditorFieldMask);

    return returnValue;
}

GetFieldHandlePtr MainWindowBase::getHandleParticleSystemEditor (void) const
{
    SFUnrecEditorInterfacePtr::GetHandlePtr returnValue(
        new  SFUnrecEditorInterfacePtr::GetHandle(
             &_sfParticleSystemEditor,
             this->getType().getFieldDesc(ParticleSystemEditorFieldId),
             const_cast<MainWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MainWindowBase::editHandleParticleSystemEditor(void)
{
    SFUnrecEditorInterfacePtr::EditHandlePtr returnValue(
        new  SFUnrecEditorInterfacePtr::EditHandle(
             &_sfParticleSystemEditor,
             this->getType().getFieldDesc(ParticleSystemEditorFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MainWindow::setParticleSystemEditor,
                    static_cast<MainWindow *>(this), _1));

    editSField(ParticleSystemEditorFieldMask);

    return returnValue;
}

GetFieldHandlePtr MainWindowBase::getHandleSceneObjectEditor (void) const
{
    SFUnrecEditorInterfacePtr::GetHandlePtr returnValue(
        new  SFUnrecEditorInterfacePtr::GetHandle(
             &_sfSceneObjectEditor,
             this->getType().getFieldDesc(SceneObjectEditorFieldId),
             const_cast<MainWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MainWindowBase::editHandleSceneObjectEditor(void)
{
    SFUnrecEditorInterfacePtr::EditHandlePtr returnValue(
        new  SFUnrecEditorInterfacePtr::EditHandle(
             &_sfSceneObjectEditor,
             this->getType().getFieldDesc(SceneObjectEditorFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MainWindow::setSceneObjectEditor,
                    static_cast<MainWindow *>(this), _1));

    editSField(SceneObjectEditorFieldMask);

    return returnValue;
}

GetFieldHandlePtr MainWindowBase::getHandleViewportEditor  (void) const
{
    SFUnrecEditorInterfacePtr::GetHandlePtr returnValue(
        new  SFUnrecEditorInterfacePtr::GetHandle(
             &_sfViewportEditor,
             this->getType().getFieldDesc(ViewportEditorFieldId),
             const_cast<MainWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MainWindowBase::editHandleViewportEditor (void)
{
    SFUnrecEditorInterfacePtr::EditHandlePtr returnValue(
        new  SFUnrecEditorInterfacePtr::EditHandle(
             &_sfViewportEditor,
             this->getType().getFieldDesc(ViewportEditorFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MainWindow::setViewportEditor,
                    static_cast<MainWindow *>(this), _1));

    editSField(ViewportEditorFieldMask);

    return returnValue;
}



#ifdef OSG_MT_CPTR_ASPECT
void MainWindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    MainWindow *pThis = static_cast<MainWindow *>(this);

    pThis->execSync(static_cast<MainWindow *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *MainWindowBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    MainWindow *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const MainWindow *>(pRefAspect),
                  dynamic_cast<const MainWindow *>(this));

    return returnValue;
}
#endif

void MainWindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<MainWindow *>(this)->setMenu(NULL);

    static_cast<MainWindow *>(this)->setToolbar(NULL);

    static_cast<MainWindow *>(this)->setStatusBar(NULL);

    static_cast<MainWindow *>(this)->setHelpPanel(NULL);

    static_cast<MainWindow *>(this)->setSceneComponentTree(NULL);

    static_cast<MainWindow *>(this)->setSceneNavigationPanel(NULL);

    static_cast<MainWindow *>(this)->setSceneViewportPanel(NULL);

    static_cast<MainWindow *>(this)->setSceneViewportToolbar(NULL);

    static_cast<MainWindow *>(this)->setSceneEditor(NULL);

    static_cast<MainWindow *>(this)->setBackgroundEditor(NULL);

    static_cast<MainWindow *>(this)->setCameraEditor(NULL);

    static_cast<MainWindow *>(this)->setForegroundEditor(NULL);

    static_cast<MainWindow *>(this)->setLightEditor(NULL);

    static_cast<MainWindow *>(this)->setParticleSystemEditor(NULL);

    static_cast<MainWindow *>(this)->setSceneObjectEditor(NULL);

    static_cast<MainWindow *>(this)->setViewportEditor(NULL);


}


OSG_END_NAMESPACE
