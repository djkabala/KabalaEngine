/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SceneEditingViewport!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &SceneEditingViewportBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 SceneEditingViewportBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 SceneEditingViewportBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the SceneEditingViewport::_sfEnableNodeSelection field.

inline
bool &SceneEditingViewportBase::editEnableNodeSelection(void)
{
    editSField(EnableNodeSelectionFieldMask);

    return _sfEnableNodeSelection.getValue();
}

//! Get the value of the SceneEditingViewport::_sfEnableNodeSelection field.
inline
      bool  SceneEditingViewportBase::getEnableNodeSelection(void) const
{
    return _sfEnableNodeSelection.getValue();
}

//! Set the value of the SceneEditingViewport::_sfEnableNodeSelection field.
inline
void SceneEditingViewportBase::setEnableNodeSelection(const bool value)
{
    editSField(EnableNodeSelectionFieldMask);

    _sfEnableNodeSelection.setValue(value);
}
//! Get the value of the SceneEditingViewport::_sfEnableTransformControls field.

inline
bool &SceneEditingViewportBase::editEnableTransformControls(void)
{
    editSField(EnableTransformControlsFieldMask);

    return _sfEnableTransformControls.getValue();
}

//! Get the value of the SceneEditingViewport::_sfEnableTransformControls field.
inline
      bool  SceneEditingViewportBase::getEnableTransformControls(void) const
{
    return _sfEnableTransformControls.getValue();
}

//! Set the value of the SceneEditingViewport::_sfEnableTransformControls field.
inline
void SceneEditingViewportBase::setEnableTransformControls(const bool value)
{
    editSField(EnableTransformControlsFieldMask);

    _sfEnableTransformControls.setValue(value);
}
//! Get the value of the SceneEditingViewport::_sfDrawGrid field.

inline
bool &SceneEditingViewportBase::editDrawGrid(void)
{
    editSField(DrawGridFieldMask);

    return _sfDrawGrid.getValue();
}

//! Get the value of the SceneEditingViewport::_sfDrawGrid field.
inline
      bool  SceneEditingViewportBase::getDrawGrid(void) const
{
    return _sfDrawGrid.getValue();
}

//! Set the value of the SceneEditingViewport::_sfDrawGrid field.
inline
void SceneEditingViewportBase::setDrawGrid(const bool value)
{
    editSField(DrawGridFieldMask);

    _sfDrawGrid.setValue(value);
}
//! Get the value of the SceneEditingViewport::_sfDrawLocalAxis field.

inline
bool &SceneEditingViewportBase::editDrawLocalAxis(void)
{
    editSField(DrawLocalAxisFieldMask);

    return _sfDrawLocalAxis.getValue();
}

//! Get the value of the SceneEditingViewport::_sfDrawLocalAxis field.
inline
      bool  SceneEditingViewportBase::getDrawLocalAxis(void) const
{
    return _sfDrawLocalAxis.getValue();
}

//! Set the value of the SceneEditingViewport::_sfDrawLocalAxis field.
inline
void SceneEditingViewportBase::setDrawLocalAxis(const bool value)
{
    editSField(DrawLocalAxisFieldMask);

    _sfDrawLocalAxis.setValue(value);
}
//! Get the value of the SceneEditingViewport::_sfDrawVolumeBox field.

inline
bool &SceneEditingViewportBase::editDrawVolumeBox(void)
{
    editSField(DrawVolumeBoxFieldMask);

    return _sfDrawVolumeBox.getValue();
}

//! Get the value of the SceneEditingViewport::_sfDrawVolumeBox field.
inline
      bool  SceneEditingViewportBase::getDrawVolumeBox(void) const
{
    return _sfDrawVolumeBox.getValue();
}

//! Set the value of the SceneEditingViewport::_sfDrawVolumeBox field.
inline
void SceneEditingViewportBase::setDrawVolumeBox(const bool value)
{
    editSField(DrawVolumeBoxFieldMask);

    _sfDrawVolumeBox.setValue(value);
}
//! Get the value of the SceneEditingViewport::_sfDrawMesh field.

inline
bool &SceneEditingViewportBase::editDrawMesh(void)
{
    editSField(DrawMeshFieldMask);

    return _sfDrawMesh.getValue();
}

//! Get the value of the SceneEditingViewport::_sfDrawMesh field.
inline
      bool  SceneEditingViewportBase::getDrawMesh(void) const
{
    return _sfDrawMesh.getValue();
}

//! Set the value of the SceneEditingViewport::_sfDrawMesh field.
inline
void SceneEditingViewportBase::setDrawMesh(const bool value)
{
    editSField(DrawMeshFieldMask);

    _sfDrawMesh.setValue(value);
}

//! Get the value of the SceneEditingViewport::_sfEditingScene field.
inline
Scene * SceneEditingViewportBase::getEditingScene(void) const
{
    return _sfEditingScene.getValue();
}

//! Set the value of the SceneEditingViewport::_sfEditingScene field.
inline
void SceneEditingViewportBase::setEditingScene(Scene * const value)
{
    editSField(EditingSceneFieldMask);

    _sfEditingScene.setValue(value);
}

//! Get the value of the \a index element the SceneEditingViewport::_mfSceneViewports field.
inline
GLViewport * SceneEditingViewportBase::getSceneViewports(const UInt32 index) const
{
    return _mfSceneViewports[index];
}

//! Get the value of the \a index element the SceneEditingViewport::_mfEditorOverlayViewports field.
inline
GLViewport * SceneEditingViewportBase::getEditorOverlayViewports(const UInt32 index) const
{
    return _mfEditorOverlayViewports[index];
}

//! Get the value of the \a index element the SceneEditingViewport::_mfSelectedNodes field.
inline
Node * SceneEditingViewportBase::getSelectedNodes(const UInt32 index) const
{
    return _mfSelectedNodes[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void SceneEditingViewportBase::execSync (      SceneEditingViewportBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (SceneViewportsFieldMask & whichField))
        _mfSceneViewports.syncWith(pFrom->_mfSceneViewports,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (EditorOverlayViewportsFieldMask & whichField))
        _mfEditorOverlayViewports.syncWith(pFrom->_mfEditorOverlayViewports,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (EnableNodeSelectionFieldMask & whichField))
        _sfEnableNodeSelection.syncWith(pFrom->_sfEnableNodeSelection);

    if(FieldBits::NoField != (EnableTransformControlsFieldMask & whichField))
        _sfEnableTransformControls.syncWith(pFrom->_sfEnableTransformControls);

    if(FieldBits::NoField != (DrawGridFieldMask & whichField))
        _sfDrawGrid.syncWith(pFrom->_sfDrawGrid);

    if(FieldBits::NoField != (DrawLocalAxisFieldMask & whichField))
        _sfDrawLocalAxis.syncWith(pFrom->_sfDrawLocalAxis);

    if(FieldBits::NoField != (DrawVolumeBoxFieldMask & whichField))
        _sfDrawVolumeBox.syncWith(pFrom->_sfDrawVolumeBox);

    if(FieldBits::NoField != (DrawMeshFieldMask & whichField))
        _sfDrawMesh.syncWith(pFrom->_sfDrawMesh);

    if(FieldBits::NoField != (SelectedNodesFieldMask & whichField))
        _mfSelectedNodes.syncWith(pFrom->_mfSelectedNodes,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (EditingSceneFieldMask & whichField))
        _sfEditingScene.syncWith(pFrom->_sfEditingScene);
}
#endif


inline
const Char8 *SceneEditingViewportBase::getClassname(void)
{
    return "SceneEditingViewport";
}
OSG_GEN_CONTAINERPTR(SceneEditingViewport);

OSG_END_NAMESPACE

