/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SceneEditingViewport
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _KESCENEEDITINGVIEWPORTBASE_H_
#define _KESCENEEDITINGVIEWPORTBASE_H_
#ifdef __sgi
#pragma once
#endif



#include <OpenSG/OSGConfig.h>
#include "KEKabalaEngineDef.h"
#include "KEConfig.h"

//#include "OpenSG/OSGBaseTypes.h"


#include <OpenSG/OSGPanel.h> // Parent

#include <OpenSG/OSGGLViewportFields.h> // SceneViewports type
#include <OpenSG/OSGSysFields.h>        // EnableNodeSelection type
#include <OpenSG/OSGNodeFields.h>       // SelectedNodes type
#include "Project/Scene/KESceneFields.h" // EditingScene type

#include "KESceneEditingViewportFields.h"

OSG_BEGIN_NAMESPACE

class SceneEditingViewport;

//! \brief SceneEditingViewport Base Class.

class KE_KABALAENGINE_DLLMAPPING SceneEditingViewportBase : public Panel
{
  public:

    typedef Panel Inherited;
    typedef Panel ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(SceneEditingViewport);
    
    

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        SceneViewportsFieldId = Inherited::NextFieldId,
        EditorOverlayViewportsFieldId = SceneViewportsFieldId + 1,
        EnableNodeSelectionFieldId = EditorOverlayViewportsFieldId + 1,
        EnableTransformControlsFieldId = EnableNodeSelectionFieldId + 1,
        DrawGridFieldId = EnableTransformControlsFieldId + 1,
        DrawLocalAxisFieldId = DrawGridFieldId + 1,
        DrawVolumeBoxFieldId = DrawLocalAxisFieldId + 1,
        DrawMeshFieldId = DrawVolumeBoxFieldId + 1,
        SelectedNodesFieldId = DrawMeshFieldId + 1,
        EditingSceneFieldId = SelectedNodesFieldId + 1,
        NextFieldId = EditingSceneFieldId + 1
    };

    static const OSG::BitVector SceneViewportsFieldMask =
        (TypeTraits<BitVector>::One << SceneViewportsFieldId);
    static const OSG::BitVector EditorOverlayViewportsFieldMask =
        (TypeTraits<BitVector>::One << EditorOverlayViewportsFieldId);
    static const OSG::BitVector EnableNodeSelectionFieldMask =
        (TypeTraits<BitVector>::One << EnableNodeSelectionFieldId);
    static const OSG::BitVector EnableTransformControlsFieldMask =
        (TypeTraits<BitVector>::One << EnableTransformControlsFieldId);
    static const OSG::BitVector DrawGridFieldMask =
        (TypeTraits<BitVector>::One << DrawGridFieldId);
    static const OSG::BitVector DrawLocalAxisFieldMask =
        (TypeTraits<BitVector>::One << DrawLocalAxisFieldId);
    static const OSG::BitVector DrawVolumeBoxFieldMask =
        (TypeTraits<BitVector>::One << DrawVolumeBoxFieldId);
    static const OSG::BitVector DrawMeshFieldMask =
        (TypeTraits<BitVector>::One << DrawMeshFieldId);
    static const OSG::BitVector SelectedNodesFieldMask =
        (TypeTraits<BitVector>::One << SelectedNodesFieldId);
    static const OSG::BitVector EditingSceneFieldMask =
        (TypeTraits<BitVector>::One << EditingSceneFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef MFUnrecGLViewportPtr MFSceneViewportsType;
    typedef MFUnrecGLViewportPtr MFEditorOverlayViewportsType;
    typedef SFBool            SFEnableNodeSelectionType;
    typedef SFBool            SFEnableTransformControlsType;
    typedef SFBool            SFDrawGridType;
    typedef SFBool            SFDrawLocalAxisType;
    typedef SFBool            SFDrawVolumeBoxType;
    typedef SFBool            SFDrawMeshType;
    typedef MFUnrecNodePtr    MFSelectedNodesType;
    typedef SFUnrecScenePtr   SFEditingSceneType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFBool              *editSFEnableNodeSelection(void);
            const SFBool              *getSFEnableNodeSelection (void) const;

                  SFBool              *editSFEnableTransformControls(void);
            const SFBool              *getSFEnableTransformControls (void) const;

                  SFBool              *editSFDrawGrid       (void);
            const SFBool              *getSFDrawGrid        (void) const;

                  SFBool              *editSFDrawLocalAxis  (void);
            const SFBool              *getSFDrawLocalAxis   (void) const;

                  SFBool              *editSFDrawVolumeBox  (void);
            const SFBool              *getSFDrawVolumeBox   (void) const;

                  SFBool              *editSFDrawMesh       (void);
            const SFBool              *getSFDrawMesh        (void) const;
            const MFUnrecNodePtr      *getMFSelectedNodes  (void) const;
                  MFUnrecNodePtr      *editMFSelectedNodes  (void);
            const SFUnrecScenePtr     *getSFEditingScene   (void) const;
                  SFUnrecScenePtr     *editSFEditingScene   (void);


                  bool                &editEnableNodeSelection(void);
                  bool                 getEnableNodeSelection (void) const;

                  bool                &editEnableTransformControls(void);
                  bool                 getEnableTransformControls (void) const;

                  bool                &editDrawGrid       (void);
                  bool                 getDrawGrid        (void) const;

                  bool                &editDrawLocalAxis  (void);
                  bool                 getDrawLocalAxis   (void) const;

                  bool                &editDrawVolumeBox  (void);
                  bool                 getDrawVolumeBox   (void) const;

                  bool                &editDrawMesh       (void);
                  bool                 getDrawMesh        (void) const;

                  Node * getSelectedNodes  (const UInt32 index) const;

                  Scene * getEditingScene   (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setEnableNodeSelection(const bool value);
            void setEnableTransformControls(const bool value);
            void setDrawGrid       (const bool value);
            void setDrawLocalAxis  (const bool value);
            void setDrawVolumeBox  (const bool value);
            void setDrawMesh       (const bool value);
            void setEditingScene   (Scene * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToSelectedNodes           (Node * const value   );
    void assignSelectedNodes          (const MFUnrecNodePtr    &value);
    void removeFromSelectedNodes (UInt32               uiIndex );
    void removeObjFromSelectedNodes(Node * const value   );
    void clearSelectedNodes            (void                         );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SceneEditingViewportTransitPtr  create          (void);
    static  SceneEditingViewport           *createEmpty     (void);

    static  SceneEditingViewportTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  SceneEditingViewport            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  SceneEditingViewportTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    MFUnrecGLViewportPtr _mfSceneViewports;
    MFUnrecGLViewportPtr _mfEditorOverlayViewports;
    SFBool            _sfEnableNodeSelection;
    SFBool            _sfEnableTransformControls;
    SFBool            _sfDrawGrid;
    SFBool            _sfDrawLocalAxis;
    SFBool            _sfDrawVolumeBox;
    SFBool            _sfDrawMesh;
    MFUnrecNodePtr    _mfSelectedNodes;
    SFUnrecScenePtr   _sfEditingScene;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SceneEditingViewportBase(void);
    SceneEditingViewportBase(const SceneEditingViewportBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SceneEditingViewportBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const SceneEditingViewport *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleSceneViewports  (void) const;
    EditFieldHandlePtr editHandleSceneViewports (void);
    GetFieldHandlePtr  getHandleEditorOverlayViewports (void) const;
    EditFieldHandlePtr editHandleEditorOverlayViewports(void);
    GetFieldHandlePtr  getHandleEnableNodeSelection (void) const;
    EditFieldHandlePtr editHandleEnableNodeSelection(void);
    GetFieldHandlePtr  getHandleEnableTransformControls (void) const;
    EditFieldHandlePtr editHandleEnableTransformControls(void);
    GetFieldHandlePtr  getHandleDrawGrid        (void) const;
    EditFieldHandlePtr editHandleDrawGrid       (void);
    GetFieldHandlePtr  getHandleDrawLocalAxis   (void) const;
    EditFieldHandlePtr editHandleDrawLocalAxis  (void);
    GetFieldHandlePtr  getHandleDrawVolumeBox   (void) const;
    EditFieldHandlePtr editHandleDrawVolumeBox  (void);
    GetFieldHandlePtr  getHandleDrawMesh        (void) const;
    EditFieldHandlePtr editHandleDrawMesh       (void);
    GetFieldHandlePtr  getHandleSelectedNodes   (void) const;
    EditFieldHandlePtr editHandleSelectedNodes  (void);
    GetFieldHandlePtr  getHandleEditingScene    (void) const;
    EditFieldHandlePtr editHandleEditingScene   (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const MFUnrecGLViewportPtr *getMFSceneViewports  (void) const;
                  MFUnrecGLViewportPtr *editMFSceneViewports (void);
            const MFUnrecGLViewportPtr *getMFEditorOverlayViewports (void) const;
                  MFUnrecGLViewportPtr *editMFEditorOverlayViewports(void);


                  GLViewport * getSceneViewports (const UInt32 index) const;

                  GLViewport * getEditorOverlayViewports(const UInt32 index) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToSceneViewports           (GLViewport * const value   );
    void assignSceneViewports           (const MFUnrecGLViewportPtr &value);
    void removeFromSceneViewports (UInt32                uiIndex );
    void removeObjFromSceneViewports(GLViewport * const value   );
    void clearSceneViewports            (void                          );

    void pushToEditorOverlayViewports           (GLViewport * const value   );
    void assignEditorOverlayViewports           (const MFUnrecGLViewportPtr &value);
    void removeFromEditorOverlayViewports (UInt32                uiIndex );
    void removeObjFromEditorOverlayViewports(GLViewport * const value   );
    void clearEditorOverlayViewports            (void                          );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      SceneEditingViewportBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SceneEditingViewportBase &source);
};

typedef SceneEditingViewportBase *SceneEditingViewportBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSCENEEDITINGVIEWPORTBASE_H_ */
