/*---------------------------------------------------------------------------*\
 *                             Kabala Engine                                 *
 *                                                                           *
 *               Copyright (C) 2009-2010 by David Kabala                     *
 *                                                                           *
 *   authors:  David Kabala (djkabala@gmail.com)                             *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU General Public License as published            *
 * by the Free Software Foundation, version 3.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU General Public                 *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MainWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &MainWindowBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 MainWindowBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 MainWindowBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the MainWindow::_sfMenu field.
inline
MainMenu * MainWindowBase::getMenu(void) const
{
    return _sfMenu.getValue();
}

//! Set the value of the MainWindow::_sfMenu field.
inline
void MainWindowBase::setMenu(MainMenu * const value)
{
    editSField(MenuFieldMask);

    _sfMenu.setValue(value);
}

//! Get the value of the MainWindow::_sfToolbar field.
inline
MainToolbar * MainWindowBase::getToolbar(void) const
{
    return _sfToolbar.getValue();
}

//! Set the value of the MainWindow::_sfToolbar field.
inline
void MainWindowBase::setToolbar(MainToolbar * const value)
{
    editSField(ToolbarFieldMask);

    _sfToolbar.setValue(value);
}

//! Get the value of the MainWindow::_sfStatusBar field.
inline
StatusBar * MainWindowBase::getStatusBar(void) const
{
    return _sfStatusBar.getValue();
}

//! Set the value of the MainWindow::_sfStatusBar field.
inline
void MainWindowBase::setStatusBar(StatusBar * const value)
{
    editSField(StatusBarFieldMask);

    _sfStatusBar.setValue(value);
}

//! Get the value of the MainWindow::_sfHelpPanel field.
inline
HelpPanel * MainWindowBase::getHelpPanel(void) const
{
    return _sfHelpPanel.getValue();
}

//! Set the value of the MainWindow::_sfHelpPanel field.
inline
void MainWindowBase::setHelpPanel(HelpPanel * const value)
{
    editSField(HelpPanelFieldMask);

    _sfHelpPanel.setValue(value);
}

//! Get the value of the MainWindow::_sfSceneComponentTree field.
inline
SceneComponentTree * MainWindowBase::getSceneComponentTree(void) const
{
    return _sfSceneComponentTree.getValue();
}

//! Set the value of the MainWindow::_sfSceneComponentTree field.
inline
void MainWindowBase::setSceneComponentTree(SceneComponentTree * const value)
{
    editSField(SceneComponentTreeFieldMask);

    _sfSceneComponentTree.setValue(value);
}

//! Get the value of the MainWindow::_sfSceneNavigationPanel field.
inline
SceneNavigationPanel * MainWindowBase::getSceneNavigationPanel(void) const
{
    return _sfSceneNavigationPanel.getValue();
}

//! Set the value of the MainWindow::_sfSceneNavigationPanel field.
inline
void MainWindowBase::setSceneNavigationPanel(SceneNavigationPanel * const value)
{
    editSField(SceneNavigationPanelFieldMask);

    _sfSceneNavigationPanel.setValue(value);
}

//! Get the value of the MainWindow::_sfSceneViewportPanel field.
inline
SceneViewportPanel * MainWindowBase::getSceneViewportPanel(void) const
{
    return _sfSceneViewportPanel.getValue();
}

//! Set the value of the MainWindow::_sfSceneViewportPanel field.
inline
void MainWindowBase::setSceneViewportPanel(SceneViewportPanel * const value)
{
    editSField(SceneViewportPanelFieldMask);

    _sfSceneViewportPanel.setValue(value);
}

//! Get the value of the MainWindow::_sfSceneViewportToolbar field.
inline
SceneViewportToolbar * MainWindowBase::getSceneViewportToolbar(void) const
{
    return _sfSceneViewportToolbar.getValue();
}

//! Set the value of the MainWindow::_sfSceneViewportToolbar field.
inline
void MainWindowBase::setSceneViewportToolbar(SceneViewportToolbar * const value)
{
    editSField(SceneViewportToolbarFieldMask);

    _sfSceneViewportToolbar.setValue(value);
}

//! Get the value of the MainWindow::_sfSceneEditor field.
inline
EditorInterface * MainWindowBase::getSceneEditor(void) const
{
    return _sfSceneEditor.getValue();
}

//! Set the value of the MainWindow::_sfSceneEditor field.
inline
void MainWindowBase::setSceneEditor(EditorInterface * const value)
{
    editSField(SceneEditorFieldMask);

    _sfSceneEditor.setValue(value);
}

//! Get the value of the MainWindow::_sfBackgroundEditor field.
inline
EditorInterface * MainWindowBase::getBackgroundEditor(void) const
{
    return _sfBackgroundEditor.getValue();
}

//! Set the value of the MainWindow::_sfBackgroundEditor field.
inline
void MainWindowBase::setBackgroundEditor(EditorInterface * const value)
{
    editSField(BackgroundEditorFieldMask);

    _sfBackgroundEditor.setValue(value);
}

//! Get the value of the MainWindow::_sfCameraEditor field.
inline
EditorInterface * MainWindowBase::getCameraEditor(void) const
{
    return _sfCameraEditor.getValue();
}

//! Set the value of the MainWindow::_sfCameraEditor field.
inline
void MainWindowBase::setCameraEditor(EditorInterface * const value)
{
    editSField(CameraEditorFieldMask);

    _sfCameraEditor.setValue(value);
}

//! Get the value of the MainWindow::_sfForegroundEditor field.
inline
EditorInterface * MainWindowBase::getForegroundEditor(void) const
{
    return _sfForegroundEditor.getValue();
}

//! Set the value of the MainWindow::_sfForegroundEditor field.
inline
void MainWindowBase::setForegroundEditor(EditorInterface * const value)
{
    editSField(ForegroundEditorFieldMask);

    _sfForegroundEditor.setValue(value);
}

//! Get the value of the MainWindow::_sfLightEditor field.
inline
EditorInterface * MainWindowBase::getLightEditor(void) const
{
    return _sfLightEditor.getValue();
}

//! Set the value of the MainWindow::_sfLightEditor field.
inline
void MainWindowBase::setLightEditor(EditorInterface * const value)
{
    editSField(LightEditorFieldMask);

    _sfLightEditor.setValue(value);
}

//! Get the value of the MainWindow::_sfParticleSystemEditor field.
inline
EditorInterface * MainWindowBase::getParticleSystemEditor(void) const
{
    return _sfParticleSystemEditor.getValue();
}

//! Set the value of the MainWindow::_sfParticleSystemEditor field.
inline
void MainWindowBase::setParticleSystemEditor(EditorInterface * const value)
{
    editSField(ParticleSystemEditorFieldMask);

    _sfParticleSystemEditor.setValue(value);
}

//! Get the value of the MainWindow::_sfSceneObjectEditor field.
inline
EditorInterface * MainWindowBase::getSceneObjectEditor(void) const
{
    return _sfSceneObjectEditor.getValue();
}

//! Set the value of the MainWindow::_sfSceneObjectEditor field.
inline
void MainWindowBase::setSceneObjectEditor(EditorInterface * const value)
{
    editSField(SceneObjectEditorFieldMask);

    _sfSceneObjectEditor.setValue(value);
}

//! Get the value of the MainWindow::_sfViewportEditor field.
inline
EditorInterface * MainWindowBase::getViewportEditor(void) const
{
    return _sfViewportEditor.getValue();
}

//! Set the value of the MainWindow::_sfViewportEditor field.
inline
void MainWindowBase::setViewportEditor(EditorInterface * const value)
{
    editSField(ViewportEditorFieldMask);

    _sfViewportEditor.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void MainWindowBase::execSync (      MainWindowBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (MenuFieldMask & whichField))
        _sfMenu.syncWith(pFrom->_sfMenu);

    if(FieldBits::NoField != (ToolbarFieldMask & whichField))
        _sfToolbar.syncWith(pFrom->_sfToolbar);

    if(FieldBits::NoField != (StatusBarFieldMask & whichField))
        _sfStatusBar.syncWith(pFrom->_sfStatusBar);

    if(FieldBits::NoField != (HelpPanelFieldMask & whichField))
        _sfHelpPanel.syncWith(pFrom->_sfHelpPanel);

    if(FieldBits::NoField != (SceneComponentTreeFieldMask & whichField))
        _sfSceneComponentTree.syncWith(pFrom->_sfSceneComponentTree);

    if(FieldBits::NoField != (SceneNavigationPanelFieldMask & whichField))
        _sfSceneNavigationPanel.syncWith(pFrom->_sfSceneNavigationPanel);

    if(FieldBits::NoField != (SceneViewportPanelFieldMask & whichField))
        _sfSceneViewportPanel.syncWith(pFrom->_sfSceneViewportPanel);

    if(FieldBits::NoField != (SceneViewportToolbarFieldMask & whichField))
        _sfSceneViewportToolbar.syncWith(pFrom->_sfSceneViewportToolbar);

    if(FieldBits::NoField != (SceneEditorFieldMask & whichField))
        _sfSceneEditor.syncWith(pFrom->_sfSceneEditor);

    if(FieldBits::NoField != (BackgroundEditorFieldMask & whichField))
        _sfBackgroundEditor.syncWith(pFrom->_sfBackgroundEditor);

    if(FieldBits::NoField != (CameraEditorFieldMask & whichField))
        _sfCameraEditor.syncWith(pFrom->_sfCameraEditor);

    if(FieldBits::NoField != (ForegroundEditorFieldMask & whichField))
        _sfForegroundEditor.syncWith(pFrom->_sfForegroundEditor);

    if(FieldBits::NoField != (LightEditorFieldMask & whichField))
        _sfLightEditor.syncWith(pFrom->_sfLightEditor);

    if(FieldBits::NoField != (ParticleSystemEditorFieldMask & whichField))
        _sfParticleSystemEditor.syncWith(pFrom->_sfParticleSystemEditor);

    if(FieldBits::NoField != (SceneObjectEditorFieldMask & whichField))
        _sfSceneObjectEditor.syncWith(pFrom->_sfSceneObjectEditor);

    if(FieldBits::NoField != (ViewportEditorFieldMask & whichField))
        _sfViewportEditor.syncWith(pFrom->_sfViewportEditor);
}
#endif


inline
const Char8 *MainWindowBase::getClassname(void)
{
    return "MainWindow";
}
OSG_GEN_CONTAINERPTR(MainWindow);

OSG_END_NAMESPACE

